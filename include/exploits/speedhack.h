#pragma once
#include <exploit.h>
#include <cache.h>
#include <config.h>

class SpeedHack : public Exploit<AItem_Gun_General*, float> {
public:
	SpeedHack() : Exploit("Speedhack") {};

	void* get_object_ptr() override {
		return cache::LocalCurrentWeapon;
	}

	void read_data(float* buffer) override {
		*buffer = cache::LocalCurrentWeapon->get_mobility();
	}

	//speedhack => mobility de l'arme en cours d'utilisation * 2
	float get_write_data() override {
		std::optional<float> original_data = this->get_original_data((AItem_Gun_General*)get_object_ptr());
		if (original_data) {
			return *original_data * 2.f;
		}

		return 0.f;
	}

	void write(AItem_Gun_General* object, float data) override {
		object->set_mobility(data);
	}

	bool* get_enabled_ptr() override {
		return &config::config->data()->fast_move;
	}
};