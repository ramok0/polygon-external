#pragma once
#include <unordered_map>

class AItem_Gun_General;

struct weapon_t {
	float TimeBetweenShots;
	bool cached_firerate;
	float CurrentSpread;
	float SpreadShot;
	bool cached_spread;
	float GunUpRecoil;
	float GunBackwardRecoil;
	float GunRecoilAlphaPerShot;
	float GunRecoilLift;
	bool cached_recoil;
	float AimDownTimeMultiplier;
	bool cached_aim_down_time_multiplier;
	float Mobility;
	bool cached_mobility;
	void* ReloadCharacterAnimation;
	void* ReloadFullCharacterAnimation;
	void* ReloadGunAnimation;
	void* ReloadFullGunAnimation;
	bool cached_reload_anims;
	void* EquipAnimation;
	bool cached_equip_animation;
};

inline static std::unordered_map<void*, weapon_t> original_weapon_data;

namespace exploits {
	void infinite_stamina(void);
	void rapid_fire();
	void no_spread(void);
	void no_recoil(void);
	void instantaim();
	void fast_move();
	float get_original_time_between_shots(void);
	void instant_reload(void);

	void apply_weapon_data(AItem_Gun_General* weapon, weapon_t data);
	void panic();
}